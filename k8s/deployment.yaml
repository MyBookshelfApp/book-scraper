apiVersion: apps/v1
kind: Deployment
metadata:
  name: book-scraper
  namespace: book-scraper
  labels:
    app: book-scraper
    version: v0.1.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: book-scraper
  template:
    metadata:
      labels:
        app: book-scraper
        version: v0.1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: book-scraper
        image: book-scraper:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: APP_NAME
        - name: APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: APP_VERSION
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: DEBUG
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: HOST
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: PORT
        - name: WORKERS
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: WORKERS
        - name: MAX_CONCURRENT_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: MAX_CONCURRENT_REQUESTS
        - name: REQUEST_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: REQUEST_TIMEOUT
        - name: RATE_LIMIT_PER_SECOND
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: RATE_LIMIT_PER_SECOND
        - name: MAX_RETRIES
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: MAX_RETRIES
        - name: RETRY_DELAY
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: RETRY_DELAY
        - name: ENABLE_METRICS
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: ENABLE_METRICS
        - name: METRICS_PORT
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: METRICS_PORT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: LOG_LEVEL
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: LOG_FORMAT
        - name: ENABLED_SOURCES
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: ENABLED_SOURCES
        - name: DATABASE_TYPE
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: DATABASE_TYPE
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: book-scraper-config
              key: REDIS_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      terminationGracePeriodSeconds: 30 